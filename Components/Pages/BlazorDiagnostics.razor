@page "/blazor-diagnostics"
@using Microsoft.JSInterop

<PageTitle>Blazor Diagnostics</PageTitle>

<h1>Blazor Diagnostics</h1>

<div class="card p-4 m-4">
    <h2>Component Rendering Test</h2>
    <p>Initial render complete: âœ“</p>
    <p>Component state change test: <span id="counter-value">@counter</span></p>
    <button class="btn btn-primary" @onclick="IncrementCounter">Increment Counter</button>

    <h2 class="mt-4">JavaScript Interop Test</h2>
    <p>JS Interop Test Status: <span id="js-test-result">@jsInteropResult</span></p>
    <button class="btn btn-info" @onclick="TestJsInterop">Test JavaScript Interop</button>

    <h2 class="mt-4">SignalR Connection Test</h2>
    <p>Connection ID: <span id="connection-id">@connectionId</span></p>
    <button class="btn btn-success" @onclick="CheckSignalRConnection">Check Connection</button>

    <div class="alert alert-info mt-4">
        <strong>Console Output:</strong> Check your browser console (F12) for detailed diagnostic messages.
    </div>

    <div class="mt-4">
        <h3>Diagnostic Info</h3>
        <ul>
            <li>Browser: @browserInfo</li>
            <li>Render Time: @renderTime</li>
            <li>Components Loaded: @componentsLoaded</li>
        </ul>
    </div>
</div>

@code {
    private int counter = 0;
    private string jsInteropResult = "Not tested";
    private string connectionId = "Unknown";
    private string browserInfo = "Checking...";
    private string renderTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
    private string componentsLoaded = "Checking...";

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", "BlazorDiagnostics: Component initialized");

                // Record components loaded status
                componentsLoaded = "Basic component rendering works";

                // Try to get browser info
                try {
                    browserInfo = await JSRuntime.InvokeAsync<string>("eval", 
                        "navigator.userAgent || 'User agent information not available'");
                }
                catch {
                    browserInfo = "Failed to get browser info";
                }

                // Force a refresh to show the updated values
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    private void IncrementCounter()
    {
        counter++;
        Console.WriteLine($"Counter incremented to {counter}");
    }

    private async Task TestJsInterop()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Testing JS Interop from button click");

            // Try to execute some simple JavaScript
            string result = await JSRuntime.InvokeAsync<string>("eval", 
                "document.title = 'JS Interop Works: ' + new Date().toISOString(); 'JS Interop successful at ' + new Date().toISOString();");

            jsInteropResult = "Success: " + result;
        }
        catch (Exception ex)
        {
            jsInteropResult = $"Error: {ex.Message}";
            Console.WriteLine($"JS Interop error: {ex.Message}");
        }
    }

    private async Task CheckSignalRConnection()
    {
        try
        {
            // Try a simpler approach to test SignalR/Blazor connection
            connectionId = "Testing connection...";
            StateHasChanged();

            await Task.Delay(500); // Brief delay to simulate network activity
            
            // If we got this far without error, the connection is working
            connectionId = "Connected at " + DateTime.Now.ToString("HH:mm:ss.fff");
        }
        catch (Exception ex)
        {
            connectionId = $"Error: {ex.Message}";
            Console.WriteLine($"Connection check error: {ex.Message}");
        }
    }
}