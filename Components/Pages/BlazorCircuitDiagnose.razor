@page "/circuit-test"
@inject IJSRuntime JSRuntime

<h1>Blazor Circuit Test</h1>

<div class="card p-4 m-4">
    <div>
        <p>Last JS Result: @jsResult</p>
        <p>Last Error: @lastError</p>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary me-2" @onclick="TestJsInterop">Test JS Interop</button>
        <button class="btn btn-warning" @onclick="@(() => { jsResult = "Reset"; lastError = "None"; })">Reset</button>
    </div>
</div>

@code {
    private string jsResult = "Not tested";
    private string lastError = "None";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TestJsInterop();
        }
    }

    private async Task TestJsInterop()
    {
        try
        {
            // Test if basic JS interop works
            await JSRuntime.InvokeVoidAsync("console.log", "Testing JS interop");

            // Try setting and getting a value
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "circuitTest", DateTime.Now.ToString());
            var value = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "circuitTest");

            jsResult = $"Success: {value}";
        }
        catch (Exception ex)
        {
            lastError = $"JS error: {ex.Message}";
            Console.WriteLine(lastError);
        }
    }
}