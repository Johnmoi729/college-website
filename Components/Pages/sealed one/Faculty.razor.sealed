@page "/faculty"
@using CollegeWebsite.Models
@using CollegeWebsite.Services
@inject IMongoDBService<Faculty> FacultyService
@inject IMongoDBService<Department> DepartmentService
@inject IMongoDBService<Course> CourseService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Faculty Directory - College Website</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Faculty Directory</h1>
        <button class="btn btn-success" @onclick="() => ShowFacultyModal(null)">Add New Faculty</button>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search faculty..." @bind="searchTerm"
                    @bind:event="oninput" />
                <button class="btn btn-primary" type="button" @onclick="ApplyFilters">Search</button>
            </div>
        </div>
        <div class="col-md-6">
            <select class="form-select" @bind="selectedDepartmentId" @bind:after="ApplyFilters">
                <option value="">All Departments</option>
                @if (departments != null)
                {
                    @foreach (var dept in departments)
                    {
                        <option value="@dept.Id">@dept.Name</option>
                    }
                }
            </select>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredFaculty == null || !filteredFaculty.Any())
    {
        <div class="alert alert-info">No faculty members found.</div>
    }
    else
    {
        @if (string.IsNullOrEmpty(selectedDepartmentId))
        {
            @foreach (var deptGroup in facultyByDepartment)
            {
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h3>@(GetDepartmentName(deptGroup.Key) ?? "Unassigned Department")</h3>
                    </div>
                    <div class="card-body">
                        <div class="row row-cols-1 row-cols-md-3 g-4">
                            @foreach (var faculty in deptGroup.Value)
                            {
                                <div class="col">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h5 class="card-title">@faculty.FirstName @faculty.LastName</h5>
                                            <p class="card-text"><strong>Position:</strong> @(faculty.Position ?? "Not specified")</p>
                                            <p class="card-text"><strong>Email:</strong> @faculty.Email</p>
                                            <p class="card-text"><strong>Phone:</strong> @faculty.Phone</p>
                                            <p class="card-text"><strong>Office:</strong> @(faculty.Office ?? "Not assigned")</p>
                                            <p class="card-text"><strong>Courses:</strong> @(faculty.CourseIds?.Count ?? 0)</p>
                                        </div>
                                        <div class="card-footer">
                                            <div class="btn-group w-100">
                                                <button class="btn btn-primary btn-sm"
                                                    @onclick="() => NavigateToFacultyDetail(faculty.Id)">View Details</button>
                                                <button class="btn btn-secondary btn-sm"
                                                    @onclick="() => ShowFacultyModal(faculty.Id)">Edit</button>
                                                <button class="btn btn-danger btn-sm"
                                                    @onclick="() => ConfirmDeleteFaculty(faculty.Id)">Delete</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row row-cols-1 row-cols-md-3 g-4">
                @foreach (var faculty in filteredFaculty)
                {
                    <div class="col">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title">@faculty.FirstName @faculty.LastName</h5>
                                <p class="card-text"><strong>Position:</strong> @(faculty.Position ?? "Not specified")</p>
                                <p class="card-text"><strong>Email:</strong> @faculty.Email</p>
                                <p class="card-text"><strong>Phone:</strong> @faculty.Phone</p>
                                <p class="card-text"><strong>Office:</strong> @(faculty.Office ?? "Not assigned")</p>
                                <p class="card-text"><strong>Courses:</strong> @(faculty.CourseIds?.Count ?? 0)</p>
                            </div>
                            <div class="card-footer">
                                <div class="btn-group w-100">
                                    <button class="btn btn-primary btn-sm" @onclick="() => NavigateToFacultyDetail(faculty.Id)">View
                                        Details</button>
                                    <button class="btn btn-secondary btn-sm"
                                        @onclick="() => ShowFacultyModal(faculty.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm"
                                        @onclick="() => ConfirmDeleteFaculty(faculty.Id)">Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@if (showModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentFaculty?.Id == null ? "Add New Faculty" : "Edit Faculty")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentFaculty" OnValidSubmit="SaveFaculty">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="facultyId" class="form-label">Faculty ID</label>
                            <InputText id="facultyId" class="form-control" @bind-Value="currentFaculty.FacultyId" />
                            <ValidationMessage For="@(() => currentFaculty.FacultyId)" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <InputText id="firstName" class="form-control" @bind-Value="currentFaculty.FirstName" />
                                <ValidationMessage For="@(() => currentFaculty.FirstName)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <InputText id="lastName" class="form-control" @bind-Value="currentFaculty.LastName" />
                                <ValidationMessage For="@(() => currentFaculty.LastName)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="currentFaculty.Email" />
                            <ValidationMessage For="@(() => currentFaculty.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone</label>
                            <InputText id="phone" class="form-control" @bind-Value="currentFaculty.Phone" />
                            <ValidationMessage For="@(() => currentFaculty.Phone)" />
                        </div>

                        <div class="mb-3">
                            <label for="position" class="form-label">Position</label>
                            <InputText id="position" class="form-control" @bind-Value="currentFaculty.Position"
                                placeholder="e.g. Professor, Assistant Professor" />
                        </div>

                        <div class="mb-3">
                            <label for="office" class="form-label">Office</label>
                            <InputText id="office" class="form-control" @bind-Value="currentFaculty.Office"
                                placeholder="e.g. Room 101, Building A" />
                        </div>

                        <div class="mb-3">
                            <label for="departmentId" class="form-label">Department</label>
                            <InputSelect id="departmentId" class="form-select" @bind-Value="currentFaculty.DepartmentId">
                                <option value="">-- Select Department --</option>
                                @if (departments != null)
                                {
                                    @foreach (var dept in departments)
                                    {
                                        <option value="@dept.Id">@dept.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label for="joinDate" class="form-label">Join Date</label>
                            <InputDate id="joinDate" class="form-control" @bind-Value="currentFaculty.JoinDate" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // State variables
    private List<CollegeWebsite.Models.Faculty>? allFaculty;
    private List<CollegeWebsite.Models.Faculty>? filteredFaculty;
    private List<Department>? departments;
    private Dictionary<string, List<CollegeWebsite.Models.Faculty>> facultyByDepartment = new();
    private bool isLoading = true;
    private string searchTerm = "";
    private string selectedDepartmentId = "";
    private bool showModal = false;
    private CollegeWebsite.Models.Faculty currentFaculty = new CollegeWebsite.Models.Faculty();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            // Load departments and faculty data using the IMongoDBService
            departments = await DepartmentService.GetAllAsync();
            allFaculty = await FacultyService.GetAllAsync();
            filteredFaculty = allFaculty;

            // Group faculty by department
            GroupFacultyByDepartment();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            // Could add error handling UI here
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GroupFacultyByDepartment()
    {
        facultyByDepartment.Clear();

        if (allFaculty == null) return;

        // Group faculty with no department
        var unassignedFaculty = allFaculty.Where(f => string.IsNullOrEmpty(f.DepartmentId)).ToList();
        if (unassignedFaculty.Any())
        {
            facultyByDepartment[string.Empty] = unassignedFaculty;
        }

        // Group faculty by department
        var groupedFaculty = allFaculty
        .Where(f => !string.IsNullOrEmpty(f.DepartmentId))
        .GroupBy(f => f.DepartmentId)
        .ToDictionary(g => g.Key, g => g.ToList());

        foreach (var group in groupedFaculty)
        {
            facultyByDepartment[group.Key] = group.Value;
        }
    }

    private void ApplyFilters()
    {
        if (allFaculty == null) return;

        // Apply search term filter
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredFaculty = allFaculty;
        }
        else
        {
            filteredFaculty = allFaculty
            .Where(f =>
            f.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            f.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            f.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            (f.Position?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
            .ToList();
        }

        // Apply department filter
        if (!string.IsNullOrEmpty(selectedDepartmentId))
        {
            filteredFaculty = filteredFaculty.Where(f => f.DepartmentId == selectedDepartmentId).ToList();
        }
        else
        {
            // If no department filter, update the department grouping
            GroupFacultyByDepartment();
        }
    }

    private string? GetDepartmentName(string? departmentId)
    {
        if (string.IsNullOrEmpty(departmentId)) return "Unassigned Department";
        return departments?.FirstOrDefault(d => d.Id == departmentId)?.Name;
    }

    private void NavigateToFacultyDetail(string id)
    {
        NavigationManager.NavigateTo($"/faculty/{id}");
    }

    private async Task ShowFacultyModal(string? id)
    {
        if (id == null)
        {
            // Create new faculty
            currentFaculty = new Faculty
            {
                JoinDate = DateTime.Now
            };
        }
        else
        {
            // Edit existing faculty
            var faculty = await FacultyService.GetByIdAsync(id);
            if (faculty != null)
            {
                currentFaculty = faculty;
            }
        }
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveFaculty()
    {
        try
        {
            if (string.IsNullOrEmpty(currentFaculty.Id))
            {
                // Create new faculty
                await FacultyService.CreateAsync(currentFaculty);
            }
            else
            {
                // Update existing faculty
                await FacultyService.UpdateAsync(currentFaculty.Id, currentFaculty);
            }

            // Reload data and close modal
            await LoadData();
            showModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving faculty: {ex.Message}");
            // Could add error handling UI here
        }
    }

    private async Task ConfirmDeleteFaculty(string id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this faculty member?"))
        {
            await DeleteFaculty(id);
        }
    }

    private async Task DeleteFaculty(string id)
    {
        try
        {
            await FacultyService.RemoveAsync(id);
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting faculty: {ex.Message}");
            // Could add error handling UI here
        }
    }
}