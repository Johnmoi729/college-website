@page "/admin/login"
@using CollegeWebsite.Models
@using CollegeWebsite.Services
@inject AdminService AdminService
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService

<PageTitle>Admin Login</PageTitle>

<div class="row justify-content-center mt-5">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Admin Login</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Username)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" @bind-Value="loginModel.Password"
                            class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100">Login</button>
                </EditForm>

                @if (showErrorMessage)
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        Invalid username or password. Please try again.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    private LoginModel loginModel = new LoginModel();
    private bool showErrorMessage = false;

    private async Task HandleValidSubmit()
    {
        var isAuthenticated = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

        if (isAuthenticated)
        {
            // Redirect to admin dashboard
            NavigationManager.NavigateTo("/admin/dashboard");
        }
        else
        {
            showErrorMessage = true;
        }
    }
}