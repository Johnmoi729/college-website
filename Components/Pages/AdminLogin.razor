@page "/admin/login"
@using CollegeWebsite.Models
@using CollegeWebsite.Services
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService
@inject IAuthStateService AuthStateService
@inject IJSRuntime JSRuntime

<PageTitle>Admin Login</PageTitle>

<div class="row justify-content-center mt-5">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Admin Login</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" id="username" @bind="username" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" id="password" @bind="password" class="form-control" />
                </div>

                <button type="button" @onclick="HandleLogin" class="btn btn-primary w-100">
                    @if (isLoggingIn)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Logging in...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>

                @if (showErrorMessage)
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @errorMessage
                    </div>
                }

                <div class="mt-3">
                    <div class="alert alert-info mb-0">
                        <strong>Status:</strong> @loginStatus
                    </div>
                </div>

                <div class="mt-4 text-center small text-muted">
                    <p>For development: Use username "admin" and password "admin123"</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string username = "admin"; // Pre-fill for testing
    private string password = "admin123"; // Pre-fill for testing
    private bool showErrorMessage = false;
    private bool isLoggingIn = false;
    private string errorMessage = "Invalid username or password. Please try again.";
    private string loginStatus = "Ready";
    private bool renderComplete = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Notify the service that rendering is complete and JS interop is available
            await AuthStateService.NotifyRenderCompleteAsync();
            renderComplete = true;
            Console.WriteLine("AdminLogin: Render complete");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            loginStatus = "Login attempt started";
            isLoggingIn = true;
            showErrorMessage = false;
            StateHasChanged();

            Console.WriteLine($"Login attempt with username: {username}");

            // Input validation
            if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
            {
                errorMessage = "Username and password are required";
                showErrorMessage = true;
                isLoggingIn = false;
                loginStatus = "Validation failed";
                StateHasChanged();
                return;
            }

            loginStatus = "Authenticating...";
            StateHasChanged();

            // Try login
            var isAuthenticated = await AuthService.LoginAsync(username, password);
            Console.WriteLine($"Authentication result: {isAuthenticated}");

            if (isAuthenticated)
            {
                loginStatus = "Authentication successful! Redirecting...";
                StateHasChanged();

                // Use direct browser navigation to force a complete page refresh
                await Task.Delay(500); // Short delay to show success message

                // Set flag in localStorage and redirect
                if (renderComplete)
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "justLoggedIn", "true");
                    await JSRuntime.InvokeVoidAsync("window.location.href", "/admin/dashboard");
                }
                else
                {
                    // Fallback if JS interop isn't available
                    NavigationManager.NavigateTo("/admin/dashboard", true);
                }
                return;
            }
            else
            {
                errorMessage = "Invalid username or password";
                showErrorMessage = true;
                loginStatus = "Authentication failed";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            errorMessage = $"Login error: {ex.Message}";
            showErrorMessage = true;
            loginStatus = "Error occurred";
        }
        finally
        {
            isLoggingIn = false;
            StateHasChanged();
        }
    }
}