@page "/courses"
@using CollegeWebsite.Models
@using CollegeWebsite.Services
@inject IMongoDBService<Course> CourseService

<PageTitle>Courses</PageTitle>

<h1>Courses</h1>

<div class="row mb-4">
    <div class="col">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search courses..." @bind="searchTerm"
                @bind:event="oninput" />
            <button class="btn btn-outline-primary" type="button" @onclick="FilterCourses">Search</button>
        </div>
    </div>
</div>

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else if (!courses.Any())
{
    <p>No courses found.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var course in filteredCourses)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@course.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@course.CourseCode</h6>
                        <p class="card-text">@(course.Description ?? "No description available.")</p>
                        <p><strong>Credits:</strong> @course.Credits</p>
                        <p><strong>Schedule:</strong> @(course.Schedule ?? "TBA")</p>
                        <p><strong>Capacity:</strong> @course.Capacity</p>
                        <p><strong>Enrolled Students:</strong> @(course.EnrolledStudentIds?.Count ?? 0)</p>
                    </div>
                    <div class="card-footer">
                        <a href="/courses/@course.Id" class="btn btn-primary">View Details</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Course>? courses;
    private List<Course>? filteredCourses;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        courses = await CourseService.GetAllAsync();
        filteredCourses = courses;
    }

    private void FilterCourses()
    {
        if (courses == null) return;

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCourses = courses;
        }
        else
        {
            filteredCourses = courses
            .Where(c => (c.Name != null && c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (c.CourseCode != null && c.CourseCode.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
            (c.Description != null && c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .ToList();
        }
    }
}