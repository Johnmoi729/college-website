@page "/feedback"
@using CollegeWebsite.Models
@using FeedbackModel = CollegeWebsite.Models.Feedback
@using CollegeWebsite.Services
@inject IMongoDBService<FeedbackModel> FeedbackService

<PageTitle>Feedback - College Website</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Feedback</h1>

    <div class="row">
        <div class="col-md-8 mx-auto mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Share Your Feedback</h3>
                </div>
                <div class="card-body">
                    <p class="lead">We value your opinion! Please take a moment to share your thoughts about our
                        college, courses, or services.</p>

                    <EditForm Model="@feedbackModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="feedbackModel.Name" />
                            <ValidationMessage For="@(() => feedbackModel.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="feedbackModel.Email" />
                            <ValidationMessage For="@(() => feedbackModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="subject" class="form-label">Subject</label>
                            <InputText id="subject" class="form-control" @bind-Value="feedbackModel.Subject" />
                            <ValidationMessage For="@(() => feedbackModel.Subject)" />
                        </div>

                        <div class="mb-3">
                            <label for="message" class="form-label">Message</label>
                            <InputTextArea id="message" class="form-control" rows="5"
                                @bind-Value="feedbackModel.Message" />
                            <ValidationMessage For="@(() => feedbackModel.Message)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Rating</label>
                            <div class="d-flex gap-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    var ratingValue = i;
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" name="Rating" value="@ratingValue"
                                            checked="@(feedbackModel.Rating == ratingValue)"
                                            @onchange="@(e => feedbackModel.Rating = ratingValue)"
                                            id="@($"rating-{ratingValue}")" />
                                        <label class="form-check-label"
                                            for="@($"rating-{ratingValue}")">@ratingValue</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>

                    @if (showSuccessMessage)
                    {
                        <div class="alert alert-success mt-3">
                            Thank you for your feedback! Your comments have been submitted successfully.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private FeedbackModel feedbackModel = new FeedbackModel();
    private bool showSuccessMessage = false;

    private async Task HandleSubmit()
    {
        try
        {
            feedbackModel.SubmissionDate = DateTime.Now;
            await FeedbackService.CreateAsync(feedbackModel);
            showSuccessMessage = true;
            feedbackModel = new FeedbackModel(); // Reset the form
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting feedback: {ex.Message}");
            // Could add error display UI here
        }
    }
}