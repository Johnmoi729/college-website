@page "/faculty/{Id}"
@using CollegeWebsite.Models
@using FacultyModel = CollegeWebsite.Models.Faculty
@using DepartmentModel = CollegeWebsite.Models.Department
@using CourseModel = CollegeWebsite.Models.Course
@using CollegeWebsite.Services
@inject FacultyService FacultyService
@inject DepartmentService DepartmentService
@inject CourseService CourseService
@inject NavigationManager NavigationManager

<PageTitle>Faculty Profile</PageTitle>

<div class="container mt-4">
    @if (loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (faculty == null)
    {
        <div class="alert alert-warning">
            <h4>Faculty Member Not Found</h4>
            <p>The requested faculty member could not be found.</p>
            <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("/faculty")'>Back to Faculty Directory</button>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h2>@faculty.FirstName @faculty.LastName</h2>
                <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("/faculty")'>Back to Faculty Directory</button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h4 class="text-primary">Faculty Information</h4>
                        <div class="mb-3">
                            <strong>Faculty ID:</strong> @faculty.FacultyId
                        </div>
                        <div class="mb-3">
                            <strong>Position:</strong> @(faculty.Position ?? "Not specified")
                        </div>
                        <div class="mb-3">
                            <strong>Email:</strong> @faculty.Email
                        </div>
                        <div class="mb-3">
                            <strong>Phone:</strong> @faculty.Phone
                        </div>
                        <div class="mb-3">
                            <strong>Office:</strong> @(faculty.Office ?? "Not assigned")
                        </div>
                        <div class="mb-3">
                            <strong>Department:</strong> @(department?.Name ?? "Not assigned to a department")
                        </div>
                        <div class="mb-3">
                            <strong>Join Date:</strong> @faculty.JoinDate.ToString("MMMM dd, yyyy")
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h5 class="card-title">Teaching Stats</h5>
                                <p><strong>Courses Taught:</strong> @(courses?.Count ?? 0)</p>
                                <p><strong>Total Students:</strong> @totalStudents</p>
                                @if (department != null)
                                {
                                    <div class="mt-3">
                                        <a href="/departments/@department.Id" class="btn btn-sm btn-outline-primary">View Department</a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                @if (courses != null && courses.Any())
                {
                    <div class="mt-4">
                        <h4 class="text-primary">Courses Taught</h4>
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Course Code</th>
                                        <th>Name</th>
                                        <th>Schedule</th>
                                        <th>Credits</th>
                                        <th>Enrolled Students</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var course in courses)
                                    {
                                        <tr>
                                            <td>@course.CourseCode</td>
                                            <td>@course.Name</td>
                                            <td>@(course.Schedule ?? "TBA")</td>
                                            <td>@course.Credits</td>
                                            <td>@(course.EnrolledStudentIds?.Count ?? 0) / @course.Capacity</td>
                                            <td>
                                                <a href="/courses/@course.Id" class="btn btn-primary btn-sm">View Details</a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info mt-4">
                        <p>This faculty member is not currently teaching any courses.</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private FacultyModel faculty;
    private DepartmentModel department;
    private List<CourseModel> courses;
    private int totalStudents = 0;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadFaculty();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadFaculty();
    }

        private async Task LoadFaculty()
    {
        loading = true;
        try
        {
            faculty = await FacultyService.GetByIdAsync(Id);
            
            if (faculty != null)
            {
                // Load department
                if (!string.IsNullOrEmpty(faculty.DepartmentId))
                {
                    department = await DepartmentService.GetByIdAsync(faculty.DepartmentId);
                }
                
                // Load courses
                courses = await CourseService.GetCoursesByFacultyAsync(Id);
                
                // Count total students
                var uniqueStudents = new HashSet<string>();
                foreach (var course in courses)
                {
                    if (course.EnrolledStudentIds != null)
                    {
                        foreach (var studentId in course.EnrolledStudentIds)
                        {
                            uniqueStudents.Add(studentId);
                        }
                    }
                }
                totalStudents = uniqueStudents.Count;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading faculty: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
}